section .data

msg: db "Menu:",0x0A
     db "1.Successive addition method.",0x0A
     db "2.Add and shift method.",0x0A
     db "3.Exit.",0x0A
len: equ $- msg

msg1:	db "Enter the 2 digit hex multiplier.",0x0A
len1: 	equ $- msg1

msg2:	db "Enter the 2 digit hex multiplicand.",0x0A
len2:	equ $- msg2

error: 	db "Invalid Choice",0x0A
errlen: equ $- error

enter: db 0x0A

count: db 0
count1: db 0

section .bss

choice: resb 2
mul:	resb 3
mul2:	resb 3
cmul:	resb 3
cmul2:	resb 3
result: resb 8
new:	resb 16
res: 	resb 1


%macro scall 4
mov rax,%1
mov rdi,%2
mov rsi,%3
mov rdx,%4
syscall
%endmacro



section .text

global _start
_start:
			
scall 1,1,msg,len
scall 0,0,choice,2

cmp byte[choice],31h
je option1 

cmp byte[choice],32h
je option2

cmp byte[choice],33h
je exit

scall 1,1,error,errlen 
jmp _start

exit:

mov rax,60
mov rdi,0
syscall


option1:

scall 1,1,msg1,len1
scall 0,0,mul,3

call clear

mov rdi,cmul
mov byte[count1],2
xor rdx,rdx
up11:
rol dx,4
mov cl,byte[rsi]
cmp cl,39h
jbe cal
sub cl,7h
cal:
sub cl,30h
add byte[rdi],cl
inc rdi
dec byte[count1]
jnz up11



scall 1,1,msg2,len2
scall 0,0,mul2,3

call clear

mov rdi,cmul2
mov byte[count1],2
xor rdx,rdx
up12:
rol dx,4
mov cl,byte[rsi]
cmp cl,39h
jbe cal1
sub cl,7h
cal1:
sub cl,30h
mov byte[rdi],cl
inc rdi
dec byte[count1]
jnz up12

call clear


mov cx,word[cmul2]
mov ax,word[cmul]
up:
add dx,ax
dec cx
jnz up










mov rdi,new	
mov byte[count],8
xor rcx,rcx

upp1:

rol dx,4
mov cl,dl
and cl,0Fh
cmp cl,09h
jbe upp
add cl,07h
upp:
add cl,30h
mov byte[rdi],cl
inc rdi
dec byte[count]
jnz upp1




scall 1,1,new,8
scall 1,1,enter,1
jmp _start

option2:




clear:

xor rax,rax
xor rbx,rbx
xor rcx,rcx
xor rdx,rdx

ret

htoa:


ret

